#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro caselight_ON]
gcode:
    {% if printer["output_pin caselight"].value|float < 0.01 %}
    SET_PIN PIN=caselight VALUE=0.01
    {% for i in range(1, 11) %}
    SET_PIN PIN=caselight VALUE={i * 0.05}
    G4 P200
    {% endfor %}
    {% else %}
    # Caselight is already on, so no action is taken.
    {% endif %}

[gcode_macro caselight_OFF]
gcode:
    {% for i in range(10, 0, -1) %}
    SET_PIN PIN=caselight VALUE={i * 0.05}
    G4 P200  # Wait for 10s between steps
    {% endfor %}
    SET_PIN PIN=caselight VALUE=0.0  # Ensure it's completely off

[gcode_macro G32]
gcode:
    #caselight_ON
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
    #caselight_OFF

[gcode_macro START_PRINT]
gcode:
    # Get final work temperatures from the slicer
    {% set final_bed_temp = params.BED_TEMP|int %}
    {% set final_extruder_temp = params.EXTRUDER_TEMP|int %}

    # Define safe preheat temperatures for initial homing/leveling
    {% set preheat_bed = 50 %}
    {% set preheat_extruder = 150 %}

    #Turn the lights on
    caselight_ON

    # Preheat sequence to safe temperatures
    status_heating
    {% set current_bed_temp = printer.heater_bed.temperature|float %}
    {% if current_bed_temp < (preheat_bed - 5) %}
      M140 S{preheat_bed}
      M190 S{preheat_bed}
    {% endif %}

    {% set current_nozzle_temp = printer.extruder.temperature|float %}
    {% if current_nozzle_temp < (preheat_extruder - 5) %}
      M104 S{preheat_extruder}
      M109 S{preheat_extruder}
    {% endif %}

    # Homing and leveling stage
    status_homing
    _CQGL

    # Now ramp up to the final work temperatures from the slicer
    status_heating
    M140 S{final_bed_temp}    ; Set bed to final work temperature
    M190 S{final_bed_temp}    ; Wait for bed to reach work temperature
    #G4 P150000                # Optional: Soak for 2.5 minutes (150,000ms = 2.5 min)
    M104 S{final_extruder_temp} ; Set nozzle to final work temperature
    M109 S{final_extruder_temp} ; Wait for nozzle to reach work temperature


    # Turn on exhaust fans (from your macro)
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.55
    SET_FAN_SPEED FAN=exhaust_fan2 SPEED=0.55
    SET_FAN_SPEED FAN=exhaust_fan3 SPEED=0.55

    # Indicate homing status
    status_homing

    # Home all axes
    G28                         # Home X,Y,Z

    # Use absolute coordinates for all movements
    G90                         # Set absolute positioning mode after homing

    # Reset any previous G-code Z offset
    SET_GCODE_OFFSET Z=0.0

    #Clear previous bed mesh
    BED_MESH_CLEAR
    
    # Move the nozzle near the bed and scan the bed mesh
    G1 Z5 F3000                 # Move Z up before leveling
    status_meshing
    BED_MESH_CALIBRATE               # Dynamically scan the bed mesh (your method)
    
    #Run nozzle cleaning macro, see below
    CLEAN_NOZZLE

    # Apply a hardcoded Z-offset
    status_calibrating_z
    SET_GCODE_OFFSET Z=0.08    # Set a fixed Z-offset for textured PEI
    #SET_GCODE_OFFSET Z=0.2    # Set a fixed Z-offset for carbon PEI

    # Reset the extruder position
    G92 E0                      # Reset extruder position to 0

    # Move Z-axis up for safe movement
    G1 Z2.0 F3000               # Move Z up to 2mm

    # Prime the nozzle with a simple priming routine
    G1 X60 Y233 Z0.28 F5000.0   # Move to start position for priming
    G1 E2 F600                 # Extrude some filament
    G1 X140 Y233.0 Z0.28 F1500.0 E15  # Draw a priming line
    G1 X140 Y232.5 Z0.28 F5000.0      # Move slightly to the side
    G1 X60 Y233.5 Z0.28 F1500.0 E15     # Draw a second priming line
    G92 E0                      # Reset extruder again

    # Move Z-axis up to avoid collisions
    G1 Z2.0 F3000

    # Indicate that printing is starting
    status_printing


[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    SET_GCODE_OFFSET Z=0.0
    #Clear previous bed mesh
    BED_MESH_CLEAR
    # Retract filament and move nozzle away
    G91
    G1 E-3 F600
    G1 Z15 F3000
    G1 E-10 F600
    G90
    G1 X10 Y221 F1000 ; Move Printer Head Out of Way
    # Indicate part ready status
    status_ready
    # Turn off nozzle LEDs
    status_off
    # Turn on fans for post-print cooling
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.55
    SET_FAN_SPEED FAN=exhaust_fan2 SPEED=0.55
    SET_FAN_SPEED FAN=exhaust_fan3 SPEED=0.55
    # Disable steppers
    M84
    UPDATE_DELAYED_GCODE ID=exhaust_fan_idle DURATION=300
    # Gradually decrease chamber light brightness
    #caselight_OFF


[gcode_macro CLEAN_NOZZLE]
gcode:
  # Start the LED effect
  status_cleaning

  # Define nozzle cleaning area parameters
  {% set start_x = 217 %}    # Cleaning area start X
  {% set start_y = 244 %}   # Cleaning area start Y
  {% set start_z = 6 %}   # Cleaning area Z height
  {% set x_min = 217 %}      # Left edge of cleaning area
  {% set x_max = 248 %}     # Right edge of cleaning area
  {% set y_min = 244 %}     # Front edge of cleaning area
  {% set y_max = 248 %}     # Back edge of cleaning area
  {% set z1 = 5.5 %}        # First cleaning depth
  {% set z2 = 5 %}          # Second cleaning depth
  {% set wipe_qty = 2 %}    # Number of cleaning cycles
  {% set wipe_spd = 80 %}   # Cleaning movement speed (mm/s)

  # Define purge bin parameters
  {% set purge_x = 180 %}   # X position for purge bin
  {% set purge_y = 250 %}   # Y position for purge bin
  {% set purge_z = 6 %}     # Z height for purge bin
  {% set purge_length = 25 %}  # Length of purge extrusion (mm)
  {% set min_temp = 190 %}     # Minimum nozzle temperature for purging

  # Ensure the printer is homed
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28  ; Home all axes
  {% endif %}

  G90  ; Use absolute positioning

  # Simple purge: move nozzle above the bin and extrude filament
  {% if printer.extruder.temperature >= min_temp %}
    G1 X{purge_x} Y{purge_y} Z{purge_z} F9000  ; Move to purge bin position
    G92 E0                                  ; Reset extruder
    G1 E{purge_length} F200                  ; Extrude filament into the bin
    G92 E0                                  ; Reset extruder
    G1 E-2 F600
  {% endif %}

  
  G4 P2000
  # Move nozzle to cleaning start position
  G1 X{start_x} Y{start_y} F1000
  G1 Z{start_z} F1500

  # Perform wiping motions over the cleaning brush
  {% for i in range(wipe_qty) %}
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{x_max} F{wipe_spd * 60}
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{x_max} F{wipe_spd * 60}
    G1 Z{z1} F1500
    G1 Y{y_min} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{x_max} F{wipe_spd * 60}
    G1 Z{z2} F1500
    G1 Y{y_max} F{wipe_spd * 60}
    G1 X{x_min} F{wipe_spd * 60}
    G1 X{x_max} F{wipe_spd * 60}
  {% endfor %}
  
  # Reset Z height and return to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F1000
  
  # Raise nozzle to idle position
  #G1 Z20 F1500


[gcode_macro _CQGL]
gcode:
  status_leveling
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28
    {% endif %}



######################################################################
# Fan control
######################################################################


[delayed_gcode exhaust_fan_boot]
initial_duration: 1.0
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.6
  SET_FAN_SPEED FAN=exhaust_fan2 SPEED=0.6
  SET_FAN_SPEED FAN=exhaust_fan3 SPEED=0.6
  SET_FAN_SPEED FAN=air_filter SPEED=0.6
  caselight_ON
  UPDATE_DELAYED_GCODE ID=exhaust_fan_idle DURATION=10

[delayed_gcode exhaust_fan_idle]
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
  SET_FAN_SPEED FAN=exhaust_fan2 SPEED=0.0
  SET_FAN_SPEED FAN=exhaust_fan3 SPEED=0.0
  SET_FAN_SPEED FAN=air_filter SPEED=0.0
  #caselight_OFF

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro TOGGLE_NEVERMORE]
gcode:
    {% if printer['fan_generic Nevermore'].speed > 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED=1
    {% endif %}


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}
   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 F6000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
      G90 ; Set coordinates to absolute
      G1 X10 Y221 F1000 ; Move Printer Head Out of Way
      ; M84 ; Disable stepper motors - don't so the gantry stays aligned
   {% endif %}
   ;set part fan speed to zero.
   M106 S0
   ;bed and hotend are left at the print temps in case I want to restart.
   CLEAR_PAUSE
   BASE_CANCEL_PRINT


######################################################################
# Build plate change
######################################################################


## Macro to install a build sheet
[gcode_macro INSTALL_BUILD_SHEET]
description: Install a build sheet and save settings
variable_parameter_NAME: "Unknown Build Sheet"
variable_parameter_OFFSET: 0.0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sheet_name = (params.NAME | default("Unknown Build Sheet") | string) %}    
    {% set sheet_offset = (params.OFFSET | default(0.0) | float) %}
    {% set sheet_key = ("build_sheet " ~ (sheet_name | lower | replace(" ", "_"))) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if not sheet %}
        # the sheet does not exist, create it
        {% set sheet = {"name": sheet_name, "offset": sheet_offset} %}
        SAVE_VARIABLE VARIABLE="{sheet_key}" VALUE="{sheet | pprint}"
    {% endif %}
    SAVE_VARIABLE VARIABLE="build_sheet installed" VALUE="'{sheet_key}'"
    SHOW_BUILD_SHEET

[gcode_macro SHOW_BUILD_SHEET]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet %}
        {action_respond_info("Build sheet: %s, Offset: %.3fmm" % (sheet.name, sheet.offset))}
    {% else %}
        {action_respond_info("No build sheet installed") }
    {% endif %}

[gcode_macro SHOW_BUILD_SHEETS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set installed_sheet = svv["build_sheet installed"] | string %}
    {% for key_name, sheet in svv | dictsort %}
        {% if key_name.startswith("build_sheet ") and key_name != "build_sheet installed" %}
            {% set installed = " [Installed]" if key_name == installed_sheet else "" %}
            {action_respond_info("Build sheet: %s, Offset: %.3fmm%s" % (sheet.name, sheet.offset, installed))}
        {% endif %}
    {% endfor %}

[gcode_macro SET_BUILD_SHEET_OFFSET]
description: Set an arbitrary offset for the build sheet
variable_parameter_OFFSET: 0.0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sheet_offset = params.OFFSET | default(None) %}
    {% set sheet_key = svv["build_sheet installed"] | string %}
    {% set sheet = svv[sheet_key] | default(None) %}
    {% if (sheet_offset is not none) and sheet %}
        {% set _ = sheet.__setitem__("offset", sheet_offset | float) %}
        # {% set sheet["offset"] = sheet_offset | float %}
        SAVE_VARIABLE VARIABLE="{sheet_key}" VALUE="{sheet | pprint}"
    {% endif %}
    SHOW_BUILD_SHEET

[gcode_macro RESET_BUILD_SHEET_OFFSET]
description: Set the build sheet offset to 0.0
gcode:
    SET_BUILD_SHEET_OFFSET OFFSET=0.0

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _BUILD_SHEETS__SET_GCODE_OFFSET
gcode:
    # this runs first so if the caller messed up the params it failes
    _BUILD_SHEETS__SET_GCODE_OFFSET {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet and (params.Z_ADJUST is defined) and ((params.Z_ADJUST | float) != 0.0) and ((params.MOVE | int) == 1) %}
        {% set _ = sheet.__setitem__("offset", (sheet.offset + (params.Z_ADJUST | default(0.0) | float))) %}
        #{% set sheet_literal = ('{"name": "%s", "offset": %.3f}' % (sheet.name, offset)) %}
        SAVE_VARIABLE VARIABLE="{sheet_key}" VALUE="{sheet | pprint}"
        SHOW_BUILD_SHEET
    {% endif %}

[gcode_macro APPLY_BUILD_SHEET_ADJUSTMENT]
description: Applies the sheet offset adjustment for the installed build sheet, call from your PRINT_START macro
gcode:
    # get the offset from saved variables
    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% if sheet %}
        # log this to the console so if there is an issue with the print the user can see which sheet the printer thought it had installed
        {action_respond_info("Applying offset: %.3fmm for build sheet: %s" % (sheet.offset, sheet.name))}
        _BUILD_SHEETS__SET_GCODE_OFFSET Z_ADJUST={sheet.offset} MOVE=1
    {% else %}
        {action_respond_info("No build sheet installed, offset adjustment: 0.000mm") }
    {% endif %}


## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
gcode:
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 240.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 10.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 5.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
#gcode:
